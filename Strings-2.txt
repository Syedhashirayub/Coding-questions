Given two strings s1 and s2, return *the lowest **ASCII** sum of deleted characters to make two strings equal*.
**Example 1:**
**Input:** s1 = "sea", s2 = "eat"
**Output:** 231
**Explanation:** Deleting "s" from "sea" adds the ASCII value of "s" (115) to the sum.
Deleting "t" from "eat" adds 116 to the sum.
At the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.

Ans:- 
def minimumDeleteSum(s1, s2):
    def helper(i, j):
        # Base case: If either string is empty, return the ASCII sum of the remaining characters
        if i == len(s1):
            return sum(ord(ch) for ch in s2[j:])
        if j == len(s2):
            return sum(ord(ch) for ch in s1[i:])
        
        # If the characters are equal, no deletion is needed
        if s1[i] == s2[j]:
            return helper(i + 1, j + 1)
        
        # Delete the current character from s1 or s2 and find the minimum ASCII sum recursively
        return min(ord(s1[i]) + helper(i + 1, j), ord(s2[j]) + helper(i, j + 1))
    
    return helper(0, 0)

Q2. 
Given a string s containing only three types of characters: '(', ')' and '*', return true *if* s *is **valid***.
The following rules define a **valid** string:
- Any left parenthesis '(' must have a corresponding right parenthesis ')'.
- Any right parenthesis ')' must have a corresponding left parenthesis '('.
- Left parenthesis '(' must go before the corresponding right parenthesis ')'.
- '*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string "".
**Example 1:**
**Input:** s = "()"
**Output:**
true

ANS:- 
def checkValidString(s):
    stack = []
    star_stack = []

    for i, char in enumerate(s):
        if char == '(':
            stack.append(i)
        elif char == '*':
            star_stack.append(i)
        else:
            if stack:
                stack.pop()
            elif star_stack:
                star_stack.pop()
            else:
                return False

    while stack and star_stack:
        if stack[-1] > star_stack[-1]:
            return False
        stack.pop()
        star_stack.pop()

    return len(stack) == 0

Q3. 
Given two strings word1 and word2, return *the minimum number of **steps** required to make* word1 *and* word2 *the same*.
In one **step**, you can delete exactly one character in either string.
**Example 1:**
**Input:** word1 = "sea", word2 = "eat"
**Output:** 2
**Explanation:** You need one step to make "sea" to "ea" and another step to make "eat" to "ea".

ANS:- 
def minSteps(word1, word2):
    m, n = len(word1), len(word2)

    # Create a 2D array to store the lengths of LCS
    dp = [[0] * (n + 1) for _ in range(m + 1)]

    # Fill the dp array
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if word1[i - 1] == word2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

    # Return the minimum number of steps
    return m + n - 2 * dp[m][n]

Q4. Binary Tree

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def str2tree(s):
    if not s:
        return None

    # Find the root value
    i = 0
    while i < len(s) and (s[i].isdigit() or s[i] == '-'):
        i += 1
    root_val = int(s[:i])

    # Create the root node
    root = TreeNode(root_val)

    # Base case: no children
    if i == len(s):
        return root

    # Find the index of the first opening parenthesis
    j = s.find('(')

    # Split the string into left and right substrings
    if j == -1:
        left_str = s[i:]
        right_str = ""
    else:
        left_str = s[i:j]
        right_str = s[j:]

    # Construct the left child recursively
    root.left = str2tree(left_str)

    # Remove the enclosing parentheses from the right substring
    if right_str.startswith('(') and right_str.endswith(')'):
        right_str = right_str[1:-1]

    # Construct the right child recursively
    root.right = str2tree(right_str)

    return root

Q5. Given an array of characters chars, compress it using the following algorithm:

Begin with an empty string s. For each group of **consecutive repeating characters** in chars:

- If the group's length is 1, append the character to s.
- Otherwise, append the character followed by the group's length.

The compressed string s **should not be returned separately**, but instead, be stored **in the input character array chars**. Note that group lengths that are 10 or longer will be split into multiple characters in chars.

After you are done **modifying the input array,** return *the new length of the array*.

You must write an algorithm that uses only constant extra space.

**Example 1:**

**Input:** chars = ["a","a","b","b","c","c","c"]

**Output:** Return 6, and the first 6 characters of the input array should be: ["a","2","b","2","c","3"]

**Explanation:**

The groups are "aa", "bb", and "ccc". This compresses to "a2b2c3".

ANS:_ 

def compress(chars):
    read_ptr = 0  # Pointer to read the characters
    write_ptr = 0  # Pointer to write the compressed characters
    count = 0  # Count of consecutive repeating characters

    # Iterate over the characters
    while read_ptr < len(chars):
        char = chars[read_ptr]

        # Increment the count for consecutive repeating characters
        count += 1

        # Check if the next character is different or the end of the array is reached
        if read_ptr + 1 == len(chars) or chars[read_ptr + 1] != char:
            chars[write_ptr] = char
            write_ptr += 1

            # Write the count if it is greater than 1
            if count > 1:
                count_str = str(count)
                for digit in count_str:
                    chars[write_ptr] = digit
                    write_ptr += 1

            # Reset the count for the next group of consecutive repeating characters
            count = 0

        # Move to the next character
        read_ptr += 1

    return write_ptr

Q6. 
Given two strings s and p, return *an array of all the start indices of* p*'s anagrams in* s. You may return the answer in **any order**.

An **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

**Example 1:**

**Input:** s = "cbaebabacd", p = "abc"

**Output:** [0,6]

**Explanation:**

The substring with start index = 0 is "cba", which is an anagram of "abc".

The substring with start index = 6 is "bac", which is an anagram of "abc".

ANS:- 

from collections import Counter

def findAnagrams(s, p):
    result = []
    p_count = Counter(p)
    s_count = Counter(s[:len(p)])

    if s_count == p_count:
        result.append(0)

    # Slide the window and update the counts
    for i in range(len(p), len(s)):
        # Remove the leftmost character from the window
        if s_count[s[i - len(p)]] == 1:
            del s_count[s[i - len(p)]]
        else:
            s_count[s[i - len(p)]] -= 1

        # Add the current character to the window
        if s[i] in s_count:
            s_count[s[i]] += 1
        else:
            s_count[s[i]] = 1

        # Check if the counts are equal
        if s_count == p_count:
            result.append(i - len(p) + 1)

    return result

Q7. 
Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].

The test cases are generated so that the length of the output will never exceed 105.

**Example 1:**

**Input:** s = "3[a]2[bc]"

**Output:** "aaabcbc"
def decodeString(s):
    stack = []
    curr_num = 0
    curr_str = ""

    for char in s:
        if char.isdigit():
            curr_num = curr_num * 10 + int(char)
        elif char == "[":
            stack.append(curr_str)
            stack.append(curr_num)
            curr_str = ""
            curr_num = 0
        elif char == "]":
            num = stack.pop()
            prev_str = stack.pop()
            curr_str = prev_str + num * curr_str
        else:
            curr_str += char

    return curr_str

Q8. 
Given two strings s and goal, return true *if you can swap two letters in* s *so the result is equal to* goal*, otherwise, return* false*.*

Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].

- For example, swapping at indices 0 and 2 in "abcd" results in "cbad".

**Example 1:**

**Input:** s = "ab", goal = "ba"

**Output:** true

**Explanation:** You can swap s[0] = 'a' and s[1] = 'b' to get "ba", which is equal to goal.
ANS 
def buddyStrings(s, goal):
    if len(s) != len(goal):
        return False

    if s == goal and len(set(s)) < len(s):
        return True

    diff = []
    for i in range(len(s)):
        if s[i] != goal[i]:
            diff.append(i)

    return len(diff) == 2 and s[diff[0]] == goal[diff[1]] and s[diff[1]] == goal[diff[0]]

 

