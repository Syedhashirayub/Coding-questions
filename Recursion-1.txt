Q1. 
Given an integer `n`, return *`true` if it is a power of two. Otherwise, return `false`*.

An integer `n` is a power of two, if there exists an integer `x` such that `n == 2x`.

**Example 1:**
Input: n = 1 

Output: true

**Example 2:**
Input: n = 16 

Output: true

**Example 3:**
Input: n = 3 

Output: false

ANS:_ 
def isPowerOfTwo(n):
    if n <= 0:
        return False
    return n & (n - 1) == 0

Q2. 
Given a number n, find the sum of the first natural numbers.

**Example 1:**

Input: n = 3 

Output: 6

**Example 2:**

Input  : 5 

Output : 15

def sumOfNaturalNumbers(n):
    return (n * (n + 1)) // 2

Q3. 
Given a positive integer, N. Find the factorial of N. 

**Example 1:**

Input: N = 5 

Output: 120

**Example 2:**

Input: N = 4

Output: 24

ANS 
def factorial(N):
    factorial = 1
    for i in range(1, N + 1):
        factorial *= i
    return factorial

Q4. 
Given a number N and a power P, the task is to find the exponent of this number raised to the given power, i.e. N^P.

**Example 1 :** 

Input: N = 5, P = 2

Output: 25

**Example 2 :**
Input: N = 2, P = 5

Output: 32

ANS 
def exponent(N, P):
    result = pow(N, P)
    return result

Q5. 
Given an array of integers **arr**, the task is to find maximum element of that array using recursion.

**Example 1:**

Input: arr = {1, 4, 3, -5, -4, 8, 6};
Output: 8

**Example 2:**

Input: arr = {1, 4, 45, 6, 10, -8};
Output: 45

ANS

def find_max(arr, start, end):
    # Base case: if there is only one element in the array
    if start == end:
        return arr[start]
    
    # Recursive case: divide the array into two halves
    mid = (start + end) // 2
    left_max = find_max(arr, start, mid)
    right_max = find_max(arr, mid + 1, end)
    
    # Return the maximum of the left and right halves
    return max(left_max, right_max)

Q6. 
Given first term (a), common difference (d) and a integer N of the Arithmetic Progression series, the task is to find Nth term of the series.

**Example 1:**

Input : a = 2 d = 1 N = 5
Output : 6
The 5th term of the series is : 6

**Example 2:**

Input : a = 5 d = 2 N = 10
Output : 23
The 10th term of the series is : 23

ANS
def find_nth_term(a, d, N):
    return a + (N - 1) * d

Q7. 
Given a string S, the task is to write a program to print all permutations of a given string.

**Example 1:**

***Input:***

*S = “ABC”*

***Output:***

*“ABC”, “ACB”, “BAC”, “BCA”, “CBA”, “CAB”*

**Example 2:**

***Input:***

*S = “XY”*

***Output:***

*“XY”, “YX”*

ANS 
def permute_string(string, left, right):
    if left == right:
        print(string)
    else:
        for i in range(left, right + 1):
            string = swap_chars(string, left, i)
            permute_string(string, left + 1, right)
            string = swap_chars(string, left, i)  # backtrack

def swap_chars(string, i, j):
    chars = list(string)
    chars[i], chars[j] = chars[j], chars[i]
    return ''.join(chars)

def print_permutations(s):
    n = len(s)
    permute_string(s, 0, n - 1)

# Example usage
s = "ABC"
print_permutations(s)

Q8. 
Given an array, find a product of all array elements.

**Example 1:**

Input  : arr[] = {1, 2, 3, 4, 5}
Output : 120
**Example 2:**

Input  : arr[] = {1, 6, 3}
Output : 18

def array_product(arr):
    product = 1
    for num in arr:
        product *= num
    return product


