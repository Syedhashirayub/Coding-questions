Q1. Given two linked list of the same size, the task is to create a new linked list using those linked lists. The condition is that the greater node among both linked list will be added to the new linked list.

class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

def createNewLinkedList(list1, list2):
    result = None
    last = None

    while list1 is not None and list2 is not None:
        if list1.value >= list2.value:
            new_node = Node(list1.value)
            list1 = list1.next
        else:
            new_node = Node(list2.value)
            list2 = list2.next

        if result is None:
            result = new_node
        else:
            last.next = new_node
        last = new_node

    # Add remaining nodes from list1, if any
    while list1 is not None:
        new_node = Node(list1.value)
        list1 = list1.next
        last.next = new_node
        last = new_node

    # Add remaining nodes from list2, if any
    while list2 is not None:
        new_node = Node(list2.value)
        list2 = list2.next
        last.next = new_node
        last = new_node

    return result


Q2. Write a function that takes a list sorted in non-decreasing order and deletes any duplicate nodes from the list. The list should only be traversed once.
    For example if the linked list is 11->11->11->21->43->43->60 then removeDuplicates() should convert the list to 11->21->43->60.

class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

def removeDuplicates(head):
    current = head

    while current is not None and current.next is not None:
        if current.value == current.next.value:
            current.next = current.next.next
        else:
            current = current.next

    return head

Q3. Given a linked list of size N. The task is to reverse every k nodes (where k is an input to the function) in the linked list. 
  If the number of nodes is not a multiple of k then left-out nodes, in the end, should be considered as a group and must be reversed (See Example 2 for clarification).

class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

def reverseKNodes(head, k):
    current = head
    prev = None
    next_node = None
    count = 0

    # Reverse the first k nodes
    while current is not None and count < k:
        next_node = current.next
        current.next = prev
        prev = current
        current = next_node
        count += 1

    # Recursively reverse the remaining nodes
    if next_node is not None:
        head.next = reverseKNodes(next_node, k)

    return prev

Q4. Given a linked list, write a function to reverse every alternate k nodes (where k is an input to the function) in an efficient way. Give the complexity of your algorithm.

class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

def reverseAlternateKNodes(head, k, reverse):
    current = head
    prev = None
    next_node = None
    count = 0

    # Reverse every alternate k nodes
    while current is not None and count < k:
        next_node = current.next
        if reverse:
            current.next = prev
        prev = current
        current = next_node
        count += 1

    # Reverse the next k nodes recursively
    if reverse:
        head.next = reverseAlternateKNodes(current, k, not reverse)
    else:
        head.next = current

    return prev if reverse else head

Q5. Given a linked list and a key to be deleted. Delete last occurrence of key from linked. The list may have duplicates.

class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

def deleteLastOccurrence(head, key):
    if head is None:
        return None

    prev = None
    current = head
    last_occurrence = None
    last_occurrence_prev = None

    # Traverse the linked list to find the last occurrence of the key
    while current is not None:
        if current.value == key:
            last_occurrence = current
            last_occurrence_prev = prev
        prev = current
        current = current.next

    # If the last occurrence is found, delete it
    if last_occurrence is not None:
        if last_occurrence == head:
            head = head.next
        else:
            last_occurrence_prev.next = last_occurrence.next

    return head

Q6. Given two sorted linked lists consisting of N and M nodes respectively. The task is to merge both of the lists (in place) and return the head of the merged list.

class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

def mergeLists(head1, head2):
    dummy = Node(0)
    current = dummy

    while head1 is not None and head2 is not None:
        if head1.value <= head2.value:
            current.next = head1
            head1 = head1.next
        else:
            current.next = head2
            head2 = head2.next
        current = current.next

    # Assign the remaining nodes of the non-empty list
    if head1 is not None:
        current.next = head1
    if head2 is not None:
        current.next = head2

    return dummy.next

Q7. Given a Doubly Linked List, the task is to reverse the given Doubly Linked List.

class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None

def reverseDoublyLinkedList(head):
    if head is None or head.next is None:
        return head

    current = head
    prev = None

    while current is not None:
        next_node = current.next
        current.next = prev
        current.prev = next_node
        prev = current
        current = next_node

    head = prev
    return head

Q8. Given a doubly linked list and a position. The task is to delete a node from given position in a doubly linked list.

class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None

def deleteNode(head, position):
    if head is None:
        return None

    if position == 0:
        head = head.next
        if head:
            head.prev = None
        return head

    current = head
    prev = None
    count = 0

    while current is not None and count < position:
        prev = current
        current = current.next
        count += 1

    if current is None:
        return head

    prev.next = current.next

    if current.next:
        current.next.prev = prev

    del current

    return head









