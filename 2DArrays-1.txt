
Q1. Given three integer arrays arr1, arr2 and arr3 **sorted** in **strictly increasing** order, return a sorted array of **only** the integers that appeared in **all** three arrays.
**Example 1:**
Input: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]
Output: [1,5]
**Explanation:** Only 1 and 5 appeared in the three arrays.

Ans:- 
def arraysIntersection(arr1, arr2, arr3):
    i, j, k = 0, 0, 0
    result = []

    # Iterate through the arrays while there are elements in all three arrays
    while i < len(arr1) and j < len(arr2) and k < len(arr3):
        # If the current elements in all three arrays are equal, add it to the result
        if arr1[i] == arr2[j] == arr3[k]:
            result.append(arr1[i])
            i += 1
            j += 1
            k += 1
        # If the current element in arr1 is smaller, move to the next element in arr1
        elif arr1[i] < arr2[j] or arr1[i] < arr3[k]:
            i += 1
        # If the current element in arr2 is smaller, move to the next element in arr2
        elif arr2[j] < arr1[i] or arr2[j] < arr3[k]:
            j += 1
        # If the current element in arr3 is smaller, move to the next element in arr3
        elif arr3[k] < arr1[i] or arr3[k] < arr2[j]:
            k += 1

    return result

Q2. Given two **0-indexed** integer arrays nums1 and nums2, return *a list* answer *of size* 2 *where:*
- answer[0] *is a list of all **distinct** integers in* nums1 *which are **not** present in* nums2*.*
- answer[1] *is a list of all **distinct** integers in* nums2 *which are **not** present in* nums1.
**Note** that the integers in the lists may be returned in **any** order.
**Example 1:**
**Input:** nums1 = [1,2,3], nums2 = [2,4,6]
**Output:** [[1,3],[4,6]]

Ans:- 
def findDisappearedNumbers(nums1, nums2):
    set1 = set(nums1)
    set2 = set(nums2)

    diff1 = list(set1 - set2)
    diff2 = list(set2 - set1)

    return [diff1, diff2]

Q3. Given a 2D integer array matrix, return *the **transpose** of* matrix.
The **transpose** of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.
**Example 1:**
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[1,4,7],[2,5,8],[3,6,9]]
Ans:- 
def transpose(matrix):
    rows = len(matrix)
    columns = len(matrix[0])

    transpose_matrix = [[0] * rows for _ in range(columns)]

    for i in range(rows):
        for j in range(columns):
            transpose_matrix[j][i] = matrix[i][j]

    return transpose_matrix

Q4. 
Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is **maximized**. Return *the maximized sum*.
**Example 1:**
Input: nums = [1,4,3,2]
Output: 4
**Explanation:** All possible pairings (ignoring the ordering of elements) are:
1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3
2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3
3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4
So the maximum possible sum is 4.
def arrayPairSum(nums):
    nums.sort()  # Sort the array in ascending order
    n = len(nums)
    max_sum = 0
    
    for i in range(0, n, 2):
        max_sum += nums[i]
    
    return max_sum

Q5. You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase **may be** incomplete.
Given the integer n, return *the number of **complete rows** of the staircase you will build*.

def arrangeCoins(n):
    left = 0
    right = n
    
    while left <= right:
        mid = left + (right - left) // 2
        curr_sum = mid * (mid + 1) // 2
        
        if curr_sum == n:
            return mid
        
        if curr_sum < n:
            left = mid + 1
        else:
            right = mid - 1
    
    return right

Q6. 
Given an integer array nums sorted in **non-decreasing** order, return *an array of **the squares of each number** sorted in non-decreasing order*.
**Example 1:**
Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
**Explanation:** After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100]

def sortedSquares(nums):
    n = len(nums)
    result = [0] * n
    left = 0
    right = n - 1
    index = n - 1
    
    while left <= right:
        if abs(nums[left]) > abs(nums[right]):
            result[index] = nums[left] * nums[left]
            left += 1
        else:
            result[index] = nums[right] * nums[right]
            right -= 1
        index -= 1
    
    return result


Q7. You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.
Count and return *the number of maximum integers in the matrix after performing all the operations*
**Input:** m = 3, n = 3, ops = [[2,2],[3,3]]
**Output:** 4
**Explanation:** The maximum integer in M is 2, and there are four of it in M. So return 4.

def maxCount(m, n, ops):
    min_ai = m
    min_bi = n
    
    for op in ops:
        min_ai = min(min_ai, op[0])
        min_bi = min(min_bi, op[1])
    
    return min_ai * min_bi

Q8. Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].
*Return the array in the form* [x1,y1,x2,y2,...,xn,yn].
**Example 1:**
**Input:** nums = [2,5,1,3,4,7], n = 3
**Output:** [2,3,5,4,1,7]
**Explanation:** Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].

def shuffle(nums, n):
    result = []
    for i in range(n):
        result.append(nums[i])
        result.append(nums[i + n])
    return result


