Question 
A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:
- s[i] == 'I' if perm[i] < perm[i + 1], and
- s[i] == 'D' if perm[i] > perm[i + 1].
Given a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return **any of them**.
**Input:** s = "IDID"
**Output:**
[0,4,1,3,2]

Answer:- def reconstruct_permutation(s):
    n = len(s)
    perm = []
    low, high = 0, n

    for i in range(n):
        if s[i] == 'I':
            perm.append(low)
            low += 1
        else:
            perm.append(high)
            high -= 1

    perm.append(low)

    return perm

Q2. 
Answer - 
def search_matrix(matrix, target):
    if not matrix or not matrix[0]:
        return False

    rows = len(matrix)
    cols = len(matrix[0])
    left = 0
    right = rows * cols - 1

    while left <= right:
        mid = left + (right - left) // 2
        mid_value = matrix[mid // cols][mid % cols]

        if mid_value == target:
            return True
        elif mid_value < target:
            left = mid + 1
        else:
            right = mid - 1

    return False

Q3. 
Answer:- def valid_mountain_array(arr):
    n = len(arr)

    if n < 3:
        return False

    peak_index = arr.index(max(arr))

    if peak_index == 0 or peak_index == n - 1:
        return False

    for i in range(peak_index):
        if arr[i] >= arr[i + 1]:
            return False

    for i in range(peak_index, n - 1):
        if arr[i] <= arr[i + 1]:
            return False

    return True

Q4. Answer 
def find_max_length(nums):
    max_length = 0
    count = 0
    count_map = {0: -1}  # Store the count and its corresponding index

    for i in range(len(nums)):
        if nums[i] == 0:
            count -= 1
        else:
            count += 1

        if count in count_map:
            max_length = max(max_length, i - count_map[count])
        else:
            count_map[count] = i

    return max_length

Q5. Answer 
def min_product_sum(nums1, nums2):
    nums1.sort()  # Sort nums1 in non-decreasing order
    nums2.sort()  # Sort nums2 in non-decreasing order

    left = 0
    right = len(nums1) - 1
    product_sum = 0

    while left <= right:
        product_sum += nums1[left] * nums2[left]
        left += 1
        product_sum += nums1[right] * nums2[right]
        right -= 1

    return product_sum

Q6. 
def find_original_array(changed):
    count = {}
    for num in changed:
        if num not in count:
            count[num] = 1
        else:
            count[num] += 1

    original = []
    for num in changed:
        double_num = 2 * num
        if double_num not in count or count[double_num] == 0:
            return []
        count[double_num] -= 1
        original.append(num)

    return original

Q7. 
def generate_spiral_matrix(n):
    matrix = [[0] * n for _ in range(n)]
    num = 1
    row, col = 0, 0
    row_inc, col_inc = 0, 1

    for _ in range(n**2):
        matrix[row][col] = num
        num += 1

        # Check if next movement is possible
        if (
            row + row_inc < 0 or row + row_inc >= n or
            col + col_inc < 0 or col + col_inc >= n or
            matrix[row + row_inc][col + col_inc] != 0
        ):
            # Change direction of movement
            row_inc, col_inc = col_inc, -row_inc

        row += row_inc
        col += col_inc

    return matrix

Q8. 
def multiply_sparse_matrices(mat1, mat2):
    m, k = len(mat1), len(mat1[0])
    k, n = len(mat2), len(mat2[0])

    res = [[0] * n for _ in range(m)]

    for i in range(m):
        for j in range(n):
            for p in range(k):
                res[i][j] += mat1[i][p] * mat2[p][j]

    return res
