Q1. Convert 1D Array Into 2D Array

You are given a **0-indexed** 1-dimensional (1D) integer array original, and two integers, m and n. You are tasked with creating a 2-dimensional (2D) array with Â m rows and n columns using **all** the elements from original.

The elements from indices 0 to n - 1 (**inclusive**) of original should form the first row of the constructed 2D array, the elements from indices n to 2 * n - 1 (**inclusive**) should form the second row of the constructed 2D array, and so on.

Return *an* m x n *2D array constructed according to the above procedure, or an empty 2D array if it is impossible*.
def convert_to_2d_array(original, m, n):
    if len(original) != m * n:
        return []  # Return an empty 2D array if the dimensions are incompatible

    result = [[0] * n for _ in range(m)]  # Initialize the 2D array with zeros

    for i in range(m):
        for j in range(n):
            result[i][j] = original[i * n + j]

    return result

Q2. You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase **may be** incomplete.
Given the integer n, return *the number of **complete rows** of the staircase you will build*.

def arrange_coins(n):
    left = 0
    right = n

    while left <= right:
        mid = left + (right - left) // 2
        curr_sum = (mid * (mid + 1)) // 2

        if curr_sum == n:
            return mid
        elif curr_sum < n:
            left = mid + 1
        else:
            right = mid - 1

    return right

Q3. Given an integer array nums sorted in **non-decreasing** order, return *an array of **the squares of each number** sorted in non-decreasing order*.

**Example 1:**

**Input:** nums = [-4,-1,0,3,10]

**Output:** [0,1,9,16,100]

**Explanation:** After squaring, the array becomes [16,1,0,9,100].

After sorting, it becomes [0,1,9,16,100].

Answer 
def sorted_squares(nums):
    squared_nums = [num ** 2 for num in nums]
    squared_nums.sort()
    return squared_nums

Q4. Given two **0-indexed** integer arrays nums1 and nums2, return *a list* answer *of size* 2 *where:*

- answer[0] *is a list of all **distinct** integers in* nums1 *which are **not** present in* nums2*.*
- answer[1] *is a list of all **distinct** integers in* nums2 *which are **not** present in* nums1.

**Note** that the integers in the lists may be returned in **any** order.

Answer 
def find_disjoint(nums1, nums2):
    set_nums1 = set(nums1)
    set_nums2 = set(nums2)
    
    distinct_nums1 = set_nums1 - set_nums2
    distinct_nums2 = set_nums2 - set_nums1
    
    return [list(distinct_nums1), list(distinct_nums2)]


Q5. Given two integer arrays arr1 and arr2, and the integer d, *return the distance value between the two arrays*.
The distance value is defined as the number of elements arr1[i] such that there is not any element arr2[j] where |arr1[i]-arr2[j]| <= d.

def find_distance_value(arr1, arr2, d):
    distance_value = 0

    for num1 in arr1:
        has_close_element = False
        for num2 in arr2:
            if abs(num1 - num2) <= d:
                has_close_element = True
                break

        if not has_close_element:
            distance_value += 1

    return distance_value

Q6. Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears **once** or **twice**, return *an array of all the integers that appears **twice***.
You must write an algorithm that runs in O(n) time and uses only constant extra space.

Answer 
def find_duplicates(nums):
    duplicates = []

    for num in nums:
        index = abs(num) - 1
        if nums[index] < 0:
            duplicates.append(abs(num))
        else:
            nums[index] *= -1

    return duplicates

Q7. Suppose an array of length n sorted in ascending order is **rotated** between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

- [4,5,6,7,0,1,2] if it was rotated 4 times.
- [0,1,2,4,5,6,7] if it was rotated 7 times.

Notice that **rotating** an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of **unique** elements, return *the minimum element of this array*.

You must write an algorithm that runs in O(log n) time.

def find_minimum(nums):
    left = 0
    right = len(nums) - 1

    while left < right:
        mid = left + (right - left) // 2

        # Check if the mid element is greater than the rightmost element
        if nums[mid] > nums[right]:
            left = mid + 1
        else:
            right = mid

    return nums[left]

Q8. An integer array original is transformed into a **doubled** array changed by appending **twice the value** of every element in original, and then randomly **shuffling** the resulting array.

Given an array changed, return original *if* changed *is a **doubled** array. If* changed *is not a **doubled** array, return an empty array. The elements in* original *may be returned in **any** order*.

from collections import Counter

def find_original_array(changed):
    counter = Counter(changed)
    original = []

    for num in changed:
        if counter[num] == 0:
            continue

        if counter[num * 2] == 0:
            return []

        counter[num] -= 1
        counter[num * 2] -= 1
        original.append(num)

    return original



